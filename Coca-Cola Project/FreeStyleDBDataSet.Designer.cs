// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace Coca_Cola_Project
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("FreeStyleDBDataSet")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class FreeStyleDBDataSet : DataSet
    {

        private InventoryDataTable tableInventory;

        private OrderFluidInfoDataTable tableOrderFluidInfo;

        private OrdersDataTable tableOrders;

        private DataRelation relationFK__OrderFlui__Fluid__286302EC;

        private DataRelation relationFK__OrderFlui__Order__276EDEB3;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public FreeStyleDBDataSet() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected FreeStyleDBDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["Inventory"] is not null)
                {
                    base.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
                }
                if (ds.Tables["OrderFluidInfo"] is not null)
                {
                    base.Tables.Add(new OrderFluidInfoDataTable(ds.Tables["OrderFluidInfo"]));
                }
                if (ds.Tables["Orders"] is not null)
                {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InventoryDataTable Inventory
        {
            get
            {
                return tableInventory;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderFluidInfoDataTable OrderFluidInfo
        {
            get
            {
                return tableOrderFluidInfo;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders
        {
            get
            {
                return tableOrders;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            FreeStyleDBDataSet cln = (FreeStyleDBDataSet)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["Inventory"] is not null)
                {
                    base.Tables.Add(new InventoryDataTable(ds.Tables["Inventory"]));
                }
                if (ds.Tables["OrderFluidInfo"] is not null)
                {
                    base.Tables.Add(new OrderFluidInfoDataTable(ds.Tables["OrderFluidInfo"]));
                }
                if (ds.Tables["Orders"] is not null)
                {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableInventory = (InventoryDataTable)base.Tables["Inventory"];
            if (initTable == true)
            {
                if (tableInventory is not null)
                {
                    tableInventory.InitVars();
                }
            }
            tableOrderFluidInfo = (OrderFluidInfoDataTable)base.Tables["OrderFluidInfo"];
            if (initTable == true)
            {
                if (tableOrderFluidInfo is not null)
                {
                    tableOrderFluidInfo.InitVars();
                }
            }
            tableOrders = (OrdersDataTable)base.Tables["Orders"];
            if (initTable == true)
            {
                if (tableOrders is not null)
                {
                    tableOrders.InitVars();
                }
            }
            relationFK__OrderFlui__Fluid__286302EC = Relations["FK__OrderFlui__Fluid__286302EC"];
            relationFK__OrderFlui__Order__276EDEB3 = Relations["FK__OrderFlui__Order__276EDEB3"];
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName = "FreeStyleDBDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/FreeStyleDBDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableInventory = new InventoryDataTable();
            base.Tables.Add(tableInventory);
            tableOrderFluidInfo = new OrderFluidInfoDataTable();
            base.Tables.Add(tableOrderFluidInfo);
            tableOrders = new OrdersDataTable();
            base.Tables.Add(tableOrders);
            relationFK__OrderFlui__Fluid__286302EC = new DataRelation("FK__OrderFlui__Fluid__286302EC", new DataColumn[] { tableInventory.FluidIDColumn }, new DataColumn[] { tableOrderFluidInfo.FluidIDColumn }, false);
            Relations.Add(relationFK__OrderFlui__Fluid__286302EC);
            relationFK__OrderFlui__Order__276EDEB3 = new DataRelation("FK__OrderFlui__Order__276EDEB3", new DataColumn[] { tableOrders.OrderIDColumn }, new DataColumn[] { tableOrderFluidInfo.OrderIDColumn }, false);
            Relations.Add(relationFK__OrderFlui__Order__276EDEB3);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeInventory()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeOrderFluidInfo()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeOrders()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new FreeStyleDBDataSet();
            var @type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;

                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {


                            }
                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void InventoryRowChangeEventHandler(object sender, InventoryRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void OrderFluidInfoRowChangeEventHandler(object sender, OrderFluidInfoRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class InventoryDataTable : TypedTableBase<InventoryRow>
        {

            private DataColumn columnFluidID;

            private DataColumn columnFluidName;

            private DataColumn columnFluidType;

            private DataColumn _columnCapacity_oz_;

            private DataColumn columnCurrentAmount;

            private DataColumn columnExpirationDate;

            private DataColumn columnLast_Fill_Date;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryDataTable() : base()
            {
                TableName = "Inventory";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal InventoryDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected InventoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FluidIDColumn
            {
                get
                {
                    return columnFluidID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FluidNameColumn
            {
                get
                {
                    return columnFluidName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FluidTypeColumn
            {
                get
                {
                    return columnFluidType;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn _Capacity_oz_Column
            {
                get
                {
                    return _columnCapacity_oz_;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CurrentAmountColumn
            {
                get
                {
                    return columnCurrentAmount;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ExpirationDateColumn
            {
                get
                {
                    return columnExpirationDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn Last_Fill_DateColumn
            {
                get
                {
                    return columnLast_Fill_Date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow this[int index]
            {
                get
                {
                    return (InventoryRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event InventoryRowChangeEventHandler InventoryRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event InventoryRowChangeEventHandler InventoryRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event InventoryRowChangeEventHandler InventoryRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event InventoryRowChangeEventHandler InventoryRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddInventoryRow(InventoryRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow AddInventoryRow(int FluidID, string FluidName, string FluidType, double _Capacity_oz_, double CurrentAmount, DateTime ExpirationDate, DateTime Last_Fill_Date)
            {
                InventoryRow rowInventoryRow = (InventoryRow)NewRow();
                object[] columnValuesArray = new object[] { FluidID, FluidName, FluidType, _Capacity_oz_, CurrentAmount, ExpirationDate, Last_Fill_Date };
                rowInventoryRow.ItemArray = columnValuesArray;
                Rows.Add(rowInventoryRow);
                return rowInventoryRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow FindByFluidID(int FluidID)
            {
                return (InventoryRow)Rows.Find(new object[] { FluidID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                InventoryDataTable cln = (InventoryDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new InventoryDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnFluidID = Columns["FluidID"];
                columnFluidName = Columns["FluidName"];
                columnFluidType = Columns["FluidType"];
                _columnCapacity_oz_ = Columns["Capacity(oz)"];
                columnCurrentAmount = Columns["CurrentAmount"];
                columnExpirationDate = Columns["ExpirationDate"];
                columnLast_Fill_Date = Columns["Last Fill Date"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnFluidID = new DataColumn("FluidID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFluidID);
                columnFluidName = new DataColumn("FluidName", typeof(string), null, MappingType.Element);
                Columns.Add(columnFluidName);
                columnFluidType = new DataColumn("FluidType", typeof(string), null, MappingType.Element);
                Columns.Add(columnFluidType);
                _columnCapacity_oz_ = new DataColumn("Capacity(oz)", typeof(double), null, MappingType.Element);
                _columnCapacity_oz_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnCapacity_oz_");
                _columnCapacity_oz_.ExtendedProperties.Add("Generator_UserColumnName", "Capacity(oz)");
                Columns.Add(_columnCapacity_oz_);
                columnCurrentAmount = new DataColumn("CurrentAmount", typeof(double), null, MappingType.Element);
                Columns.Add(columnCurrentAmount);
                columnExpirationDate = new DataColumn("ExpirationDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnExpirationDate);
                columnLast_Fill_Date = new DataColumn("Last Fill Date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnLast_Fill_Date);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnFluidID }, true));
                columnFluidID.AllowDBNull = false;
                columnFluidID.Unique = true;
                columnFluidName.AllowDBNull = false;
                columnFluidName.MaxLength = 50;
                columnFluidType.AllowDBNull = false;
                columnFluidType.MaxLength = 50;
                _columnCapacity_oz_.AllowDBNull = false;
                columnCurrentAmount.AllowDBNull = false;
                columnExpirationDate.AllowDBNull = false;
                columnLast_Fill_Date.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow NewInventoryRow()
            {
                return (InventoryRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new InventoryRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(InventoryRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (InventoryRowChanged is not null)
                {
                    InventoryRowChanged?.Invoke(this, new InventoryRowChangeEvent((InventoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (InventoryRowChanging is not null)
                {
                    InventoryRowChanging?.Invoke(this, new InventoryRowChangeEvent((InventoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (InventoryRowDeleted is not null)
                {
                    InventoryRowDeleted?.Invoke(this, new InventoryRowChangeEvent((InventoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (InventoryRowDeleting is not null)
                {
                    InventoryRowDeleting?.Invoke(this, new InventoryRowChangeEvent((InventoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveInventoryRow(InventoryRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var @type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FreeStyleDBDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InventoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;

                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {


                                }
                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class OrderFluidInfoDataTable : TypedTableBase<OrderFluidInfoRow>
        {

            private DataColumn columnOrderID;

            private DataColumn columnFluidID;

            private DataColumn columnIsFluidMix;

            private DataColumn columnUsedOz;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoDataTable() : base()
            {
                TableName = "OrderFluidInfo";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal OrderFluidInfoDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected OrderFluidInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OrderIDColumn
            {
                get
                {
                    return columnOrderID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FluidIDColumn
            {
                get
                {
                    return columnFluidID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn IsFluidMixColumn
            {
                get
                {
                    return columnIsFluidMix;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UsedOzColumn
            {
                get
                {
                    return columnUsedOz;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow this[int index]
            {
                get
                {
                    return (OrderFluidInfoRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrderFluidInfoRowChangeEventHandler OrderFluidInfoRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrderFluidInfoRowChangeEventHandler OrderFluidInfoRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrderFluidInfoRowChangeEventHandler OrderFluidInfoRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrderFluidInfoRowChangeEventHandler OrderFluidInfoRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddOrderFluidInfoRow(OrderFluidInfoRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow AddOrderFluidInfoRow(OrdersRow parentOrdersRowByFK__OrderFlui__Order__276EDEB3, InventoryRow parentInventoryRowByFK__OrderFlui__Fluid__286302EC, string IsFluidMix, double UsedOz)
            {
                OrderFluidInfoRow rowOrderFluidInfoRow = (OrderFluidInfoRow)NewRow();
                object[] columnValuesArray = new object[] { null, null, IsFluidMix, UsedOz };
                if (parentOrdersRowByFK__OrderFlui__Order__276EDEB3 is not null)
                {
                    columnValuesArray[0] = parentOrdersRowByFK__OrderFlui__Order__276EDEB3[0];
                }
                if (parentInventoryRowByFK__OrderFlui__Fluid__286302EC is not null)
                {
                    columnValuesArray[1] = parentInventoryRowByFK__OrderFlui__Fluid__286302EC[0];
                }
                rowOrderFluidInfoRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrderFluidInfoRow);
                return rowOrderFluidInfoRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow FindByOrderIDFluidID(int OrderID, int FluidID)
            {
                return (OrderFluidInfoRow)Rows.Find(new object[] { OrderID, FluidID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                OrderFluidInfoDataTable cln = (OrderFluidInfoDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new OrderFluidInfoDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnOrderID = Columns["OrderID"];
                columnFluidID = Columns["FluidID"];
                columnIsFluidMix = Columns["IsFluidMix"];
                columnUsedOz = Columns["UsedOz"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnOrderID = new DataColumn("OrderID", typeof(int), null, MappingType.Element);
                Columns.Add(columnOrderID);
                columnFluidID = new DataColumn("FluidID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFluidID);
                columnIsFluidMix = new DataColumn("IsFluidMix", typeof(string), null, MappingType.Element);
                Columns.Add(columnIsFluidMix);
                columnUsedOz = new DataColumn("UsedOz", typeof(double), null, MappingType.Element);
                Columns.Add(columnUsedOz);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnOrderID, columnFluidID }, true));
                columnOrderID.AllowDBNull = false;
                columnFluidID.AllowDBNull = false;
                columnIsFluidMix.AllowDBNull = false;
                columnIsFluidMix.MaxLength = 50;
                columnUsedOz.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow NewOrderFluidInfoRow()
            {
                return (OrderFluidInfoRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderFluidInfoRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(OrderFluidInfoRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (OrderFluidInfoRowChanged is not null)
                {
                    OrderFluidInfoRowChanged?.Invoke(this, new OrderFluidInfoRowChangeEvent((OrderFluidInfoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (OrderFluidInfoRowChanging is not null)
                {
                    OrderFluidInfoRowChanging?.Invoke(this, new OrderFluidInfoRowChangeEvent((OrderFluidInfoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (OrderFluidInfoRowDeleted is not null)
                {
                    OrderFluidInfoRowDeleted?.Invoke(this, new OrderFluidInfoRowChangeEvent((OrderFluidInfoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (OrderFluidInfoRowDeleting is not null)
                {
                    OrderFluidInfoRowDeleting?.Invoke(this, new OrderFluidInfoRowChangeEvent((OrderFluidInfoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveOrderFluidInfoRow(OrderFluidInfoRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var @type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FreeStyleDBDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderFluidInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;

                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {


                                }
                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class OrdersDataTable : TypedTableBase<OrdersRow>
        {

            private DataColumn columnOrderID;

            private DataColumn columnOrderAmount;

            private DataColumn columnDateOfOrder;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersDataTable() : base()
            {
                TableName = "Orders";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal OrdersDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }
                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected OrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OrderIDColumn
            {
                get
                {
                    return columnOrderID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OrderAmountColumn
            {
                get
                {
                    return columnOrderAmount;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn DateOfOrderColumn
            {
                get
                {
                    return columnDateOfOrder;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow this[int index]
            {
                get
                {
                    return (OrdersRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrdersRowChangeEventHandler OrdersRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrdersRowChangeEventHandler OrdersRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrdersRowChangeEventHandler OrdersRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event OrdersRowChangeEventHandler OrdersRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddOrdersRow(OrdersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow AddOrdersRow(double OrderAmount, DateTime DateOfOrder)
            {
                OrdersRow rowOrdersRow = (OrdersRow)NewRow();
                object[] columnValuesArray = new object[] { null, OrderAmount, DateOfOrder };
                rowOrdersRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow FindByOrderID(int OrderID)
            {
                return (OrdersRow)Rows.Find(new object[] { OrderID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                OrdersDataTable cln = (OrdersDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new OrdersDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnOrderID = Columns["OrderID"];
                columnOrderAmount = Columns["OrderAmount"];
                columnDateOfOrder = Columns["DateOfOrder"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnOrderID = new DataColumn("OrderID", typeof(int), null, MappingType.Element);
                Columns.Add(columnOrderID);
                columnOrderAmount = new DataColumn("OrderAmount", typeof(double), null, MappingType.Element);
                Columns.Add(columnOrderAmount);
                columnDateOfOrder = new DataColumn("DateOfOrder", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnDateOfOrder);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnOrderID }, true));
                columnOrderID.AutoIncrement = true;
                columnOrderID.AutoIncrementSeed = -1;
                columnOrderID.AutoIncrementStep = -1;
                columnOrderID.AllowDBNull = false;
                columnOrderID.ReadOnly = true;
                columnOrderID.Unique = true;
                columnOrderAmount.AllowDBNull = false;
                columnDateOfOrder.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow NewOrdersRow()
            {
                return (OrdersRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrdersRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(OrdersRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (OrdersRowChanged is not null)
                {
                    OrdersRowChanged?.Invoke(this, new OrdersRowChangeEvent((OrdersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (OrdersRowChanging is not null)
                {
                    OrdersRowChanging?.Invoke(this, new OrdersRowChangeEvent((OrdersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (OrdersRowDeleted is not null)
                {
                    OrdersRowDeleted?.Invoke(this, new OrdersRowChangeEvent((OrdersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (OrdersRowDeleting is not null)
                {
                    OrdersRowDeleting?.Invoke(this, new OrdersRowChangeEvent((OrdersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveOrdersRow(OrdersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var @type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FreeStyleDBDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;

                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {


                                }
                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class InventoryRow : DataRow
        {

            private InventoryDataTable tableInventory;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal InventoryRow(DataRowBuilder rb) : base(rb)
            {
                tableInventory = (InventoryDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int FluidID
            {
                get
                {
                    return Conversions.ToInteger(this[tableInventory.FluidIDColumn]);
                }
                set
                {
                    this[tableInventory.FluidIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FluidName
            {
                get
                {
                    return Conversions.ToString(this[tableInventory.FluidNameColumn]);
                }
                set
                {
                    this[tableInventory.FluidNameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FluidType
            {
                get
                {
                    return Conversions.ToString(this[tableInventory.FluidTypeColumn]);
                }
                set
                {
                    this[tableInventory.FluidTypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double _Capacity_oz_
            {
                get
                {
                    return Conversions.ToDouble(this[tableInventory._Capacity_oz_Column]);
                }
                set
                {
                    this[tableInventory._Capacity_oz_Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double CurrentAmount
            {
                get
                {
                    return Conversions.ToDouble(this[tableInventory.CurrentAmountColumn]);
                }
                set
                {
                    this[tableInventory.CurrentAmountColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime ExpirationDate
            {
                get
                {
                    return Conversions.ToDate(this[tableInventory.ExpirationDateColumn]);
                }
                set
                {
                    this[tableInventory.ExpirationDateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime Last_Fill_Date
            {
                get
                {
                    return Conversions.ToDate(this[tableInventory.Last_Fill_DateColumn]);
                }
                set
                {
                    this[tableInventory.Last_Fill_DateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow[] GetOrderFluidInfoRows()
            {
                if (Table.ChildRelations["FK__OrderFlui__Fluid__286302EC"] is null)
                {
                    return new OrderFluidInfoRow[0];
                }
                else
                {
                    return (OrderFluidInfoRow[])GetChildRows(Table.ChildRelations["FK__OrderFlui__Fluid__286302EC"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class OrderFluidInfoRow : DataRow
        {

            private OrderFluidInfoDataTable tableOrderFluidInfo;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal OrderFluidInfoRow(DataRowBuilder rb) : base(rb)
            {
                tableOrderFluidInfo = (OrderFluidInfoDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int OrderID
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrderFluidInfo.OrderIDColumn]);
                }
                set
                {
                    this[tableOrderFluidInfo.OrderIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int FluidID
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrderFluidInfo.FluidIDColumn]);
                }
                set
                {
                    this[tableOrderFluidInfo.FluidIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string IsFluidMix
            {
                get
                {
                    return Conversions.ToString(this[tableOrderFluidInfo.IsFluidMixColumn]);
                }
                set
                {
                    this[tableOrderFluidInfo.IsFluidMixColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double UsedOz
            {
                get
                {
                    return Conversions.ToDouble(this[tableOrderFluidInfo.UsedOzColumn]);
                }
                set
                {
                    this[tableOrderFluidInfo.UsedOzColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow InventoryRow
            {
                get
                {
                    return (InventoryRow)GetParentRow(Table.ParentRelations["FK__OrderFlui__Fluid__286302EC"]);
                }
                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__OrderFlui__Fluid__286302EC"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow OrdersRow
            {
                get
                {
                    return (OrdersRow)GetParentRow(Table.ParentRelations["FK__OrderFlui__Order__276EDEB3"]);
                }
                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__OrderFlui__Order__276EDEB3"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class OrdersRow : DataRow
        {

            private OrdersDataTable tableOrders;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal OrdersRow(DataRowBuilder rb) : base(rb)
            {
                tableOrders = (OrdersDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int OrderID
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrders.OrderIDColumn]);
                }
                set
                {
                    this[tableOrders.OrderIDColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public double OrderAmount
            {
                get
                {
                    return Conversions.ToDouble(this[tableOrders.OrderAmountColumn]);
                }
                set
                {
                    this[tableOrders.OrderAmountColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime DateOfOrder
            {
                get
                {
                    return Conversions.ToDate(this[tableOrders.DateOfOrderColumn]);
                }
                set
                {
                    this[tableOrders.DateOfOrderColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow[] GetOrderFluidInfoRows()
            {
                if (Table.ChildRelations["FK__OrderFlui__Order__276EDEB3"] is null)
                {
                    return new OrderFluidInfoRow[0];
                }
                else
                {
                    return (OrderFluidInfoRow[])GetChildRows(Table.ChildRelations["FK__OrderFlui__Order__276EDEB3"]);
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class InventoryRowChangeEvent : EventArgs
        {

            private InventoryRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRowChangeEvent(InventoryRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class OrderFluidInfoRowChangeEvent : EventArgs
        {

            private OrderFluidInfoRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRowChangeEvent(OrderFluidInfoRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class OrdersRowChangeEvent : EventArgs
        {

            private OrdersRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRowChangeEvent(OrdersRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace FreeStyleDBDataSetTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class InventoryTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public InventoryTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection = value;
                        }
                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }
                    if (Adapter is not null && Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Inventory";
                tableMapping.ColumnMappings.Add("FluidID", "FluidID");
                tableMapping.ColumnMappings.Add("FluidName", "FluidName");
                tableMapping.ColumnMappings.Add("FluidType", "FluidType");
                tableMapping.ColumnMappings.Add("Capacity(oz)", "Capacity(oz)");
                tableMapping.ColumnMappings.Add("CurrentAmount", "CurrentAmount");
                tableMapping.ColumnMappings.Add("ExpirationDate", "ExpirationDate");
                tableMapping.ColumnMappings.Add("Last Fill Date", "Last Fill Date");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [Inventory] WHERE (([FluidID] = @Original_FluidID) AND ([FluidName] =" + " @Original_FluidName) AND ([FluidType] = @Original_FluidType) AND ([Capacity(oz)" + "] = @p2) AND ([CurrentAmount] = @Original_CurrentAmount) AND ([ExpirationDate] =" + " @Original_ExpirationDate) AND ([Last Fill Date] = @Original_Last_Fill_Date))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidName", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidName", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidType", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidType", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@p2", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Capacity(oz)", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CurrentAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExpirationDate", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "ExpirationDate", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Last_Fill_Date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "Last Fill Date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [Inventory] ([FluidID], [FluidName], [FluidType], [Capacity(oz)], [Cu" + "rrentAmount], [ExpirationDate], [Last Fill Date]) VALUES (@FluidID, @FluidName, " + "@FluidType, @p1, @CurrentAmount, @ExpirationDate, @Last_Fill_Date);" + '\r' + '\n' + "SELECT Flui" + "dID, FluidName, FluidType, [Capacity(oz)], CurrentAmount, ExpirationDate, [Last " + "Fill Date] FROM Inventory WHERE (FluidID = @FluidID)";



                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidName", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidName", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidType", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidType", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@p1", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Capacity(oz)", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExpirationDate", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "ExpirationDate", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Last_Fill_Date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "Last Fill Date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [Inventory] SET [FluidID] = @FluidID, [FluidName] = @FluidName, [FluidType" + "] = @FluidType, [Capacity(oz)] = @p1, [CurrentAmount] = @CurrentAmount, [Expirat" + "ionDate] = @ExpirationDate, [Last Fill Date] = @Last_Fill_Date WHERE (([FluidID]" + " = @Original_FluidID) AND ([FluidName] = @Original_FluidName) AND ([FluidType] =" + " @Original_FluidType) AND ([Capacity(oz)] = @p2) AND ([CurrentAmount] = @Origina" + "l_CurrentAmount) AND ([ExpirationDate] = @Original_ExpirationDate) AND ([Last Fi" + "ll Date] = @Original_Last_Fill_Date));" + '\r' + '\n' + "SELECT FluidID, FluidName, FluidType, [C" + "apacity(oz)], CurrentAmount, ExpirationDate, [Last Fill Date] FROM Inventory WHE" + "RE (FluidID = @FluidID)";







                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidName", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidName", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidType", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidType", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@p1", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Capacity(oz)", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExpirationDate", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "ExpirationDate", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Last_Fill_Date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "Last Fill Date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidName", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidName", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidType", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "FluidType", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@p2", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "Capacity(oz)", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CurrentAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExpirationDate", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "ExpirationDate", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Last_Fill_Date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "Last Fill Date", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FreeStyleDBConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[7];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT FluidID, FluidName, FluidType, [Capacity(oz)], CurrentAmount, ExpirationDa" + "te, [Last Fill Date] FROM Inventory";
                _commandCollection[0].CommandType = CommandType.Text;
                _commandCollection[1] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[1].Connection = Connection;
                _commandCollection[1].CommandText = "SELECT [Capacity(oz)]" + '\r' + '\n' + "FROM     Inventory" + '\r' + '\n' + "WHERE  (FluidID = @Original_FluidID)";
                _commandCollection[1].CommandType = CommandType.Text;
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[2].Connection = Connection;
                _commandCollection[2].CommandText = "SELECT CurrentAmount" + '\r' + '\n' + "FROM     Inventory" + '\r' + '\n' + "WHERE  (FluidID = @Original_FluidID)";
                _commandCollection[2].CommandType = CommandType.Text;
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[3].Connection = Connection;
                _commandCollection[3].CommandText = "SELECT ExpirationDate" + '\r' + '\n' + "FROM     Inventory" + '\r' + '\n' + "WHERE  (FluidID = @Original_FluidID)";
                _commandCollection[3].CommandType = CommandType.Text;
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[4] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[4].Connection = Connection;
                _commandCollection[4].CommandText = "SELECT [Last Fill Date]" + '\r' + '\n' + "FROM     Inventory" + '\r' + '\n' + "WHERE  (FluidID = @Original_FluidID)" + "";
                _commandCollection[4].CommandType = CommandType.Text;
                _commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[5].Connection = Connection;
                _commandCollection[5].CommandText = "UPDATE Inventory" + '\r' + '\n' + "SET          CurrentAmount = @CurrentAmount, ExpirationDate = @" + "ExpirationDate, [Last Fill Date] = @Last_Fill_Date" + '\r' + '\n' + "WHERE  (FluidID = @Original_" + "FluidID); " + '\r' + '\n' + "SELECT FluidID, FluidName, FluidType, [Capacity(oz)], CurrentAmount," + " ExpirationDate, [Last Fill Date] FROM Inventory WHERE (FluidID = @FluidID)";


                _commandCollection[5].CommandType = CommandType.Text;
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentAmount", SqlDbType.Float, 8, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExpirationDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "ExpirationDate", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Last_Fill_Date", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "Last Fill Date", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _commandCollection[6] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[6].Connection = Connection;
                _commandCollection[6].CommandText = "UPDATE Inventory" + '\r' + '\n' + "SET          CurrentAmount = @CurrentAmount" + '\r' + '\n' + "WHERE  (FluidID = " + "@Original_FluidID);   " + '\r' + '\n' + "SELECT FluidID, FluidName, FluidType, [Capacity(oz)], Cu" + "rrentAmount, ExpirationDate, [Last Fill Date] FROM Inventory WHERE (FluidID = @F" + "luidID)";


                _commandCollection[6].CommandType = CommandType.Text;
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CurrentAmount", SqlDbType.Float, 8, ParameterDirection.Input, 0, 0, "CurrentAmount", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FreeStyleDBDataSet.InventoryDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FreeStyleDBDataSet.InventoryDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FreeStyleDBDataSet.InventoryDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet.InventoryDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Inventory");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_FluidID, string Original_FluidName, string Original_FluidType, double p2, double Original_CurrentAmount, DateTime Original_ExpirationDate, DateTime Original_Last_Fill_Date)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_FluidID;
                if (Original_FluidName is null)
                {
                    throw new ArgumentNullException("Original_FluidName");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_FluidName;
                }
                if (Original_FluidType is null)
                {
                    throw new ArgumentNullException("Original_FluidType");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_FluidType;
                }
                Adapter.DeleteCommand.Parameters[3].Value = p2;
                Adapter.DeleteCommand.Parameters[4].Value = Original_CurrentAmount;
                Adapter.DeleteCommand.Parameters[5].Value = Original_ExpirationDate;
                Adapter.DeleteCommand.Parameters[6].Value = Original_Last_Fill_Date;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int FluidID, string FluidName, string FluidType, double p1, double CurrentAmount, DateTime ExpirationDate, DateTime Last_Fill_Date)
            {
                Adapter.InsertCommand.Parameters[0].Value = FluidID;
                if (FluidName is null)
                {
                    throw new ArgumentNullException("FluidName");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = FluidName;
                }
                if (FluidType is null)
                {
                    throw new ArgumentNullException("FluidType");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = FluidType;
                }
                Adapter.InsertCommand.Parameters[3].Value = p1;
                Adapter.InsertCommand.Parameters[4].Value = CurrentAmount;
                Adapter.InsertCommand.Parameters[5].Value = ExpirationDate;
                Adapter.InsertCommand.Parameters[6].Value = Last_Fill_Date;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int FluidID, string FluidName, string FluidType, double p1, double CurrentAmount, DateTime ExpirationDate, DateTime Last_Fill_Date, int Original_FluidID, string Original_FluidName, string Original_FluidType, double p2, double Original_CurrentAmount, DateTime Original_ExpirationDate, DateTime Original_Last_Fill_Date)
            {
                Adapter.UpdateCommand.Parameters[0].Value = FluidID;
                if (FluidName is null)
                {
                    throw new ArgumentNullException("FluidName");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = FluidName;
                }
                if (FluidType is null)
                {
                    throw new ArgumentNullException("FluidType");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = FluidType;
                }
                Adapter.UpdateCommand.Parameters[3].Value = p1;
                Adapter.UpdateCommand.Parameters[4].Value = CurrentAmount;
                Adapter.UpdateCommand.Parameters[5].Value = ExpirationDate;
                Adapter.UpdateCommand.Parameters[6].Value = Last_Fill_Date;
                Adapter.UpdateCommand.Parameters[7].Value = Original_FluidID;
                if (Original_FluidName is null)
                {
                    throw new ArgumentNullException("Original_FluidName");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = Original_FluidName;
                }
                if (Original_FluidType is null)
                {
                    throw new ArgumentNullException("Original_FluidType");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[9].Value = Original_FluidType;
                }
                Adapter.UpdateCommand.Parameters[10].Value = p2;
                Adapter.UpdateCommand.Parameters[11].Value = Original_CurrentAmount;
                Adapter.UpdateCommand.Parameters[12].Value = Original_ExpirationDate;
                Adapter.UpdateCommand.Parameters[13].Value = Original_Last_Fill_Date;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string FluidName, string FluidType, double p1, double CurrentAmount, DateTime ExpirationDate, DateTime Last_Fill_Date, int Original_FluidID, string Original_FluidName, string Original_FluidType, double p2, double Original_CurrentAmount, DateTime Original_ExpirationDate, DateTime Original_Last_Fill_Date)
            {
                return Update(Original_FluidID, FluidName, FluidType, p1, CurrentAmount, ExpirationDate, Last_Fill_Date, Original_FluidID, Original_FluidName, Original_FluidType, p2, Original_CurrentAmount, Original_ExpirationDate, Original_Last_Fill_Date);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object SelectCapacity(int Original_FluidID)
            {
                var command = CommandCollection[1];
                command.Parameters[0].Value = Original_FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual double? SelectCurrentAmount(int Original_FluidID)
            {
                var command = CommandCollection[2];
                command.Parameters[0].Value = Original_FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new double?();
                }
                else
                {
                    return new double?(Conversions.ToDouble(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual DateTime? SelectExpirationDate(int Original_FluidID)
            {
                var command = CommandCollection[3];
                command.Parameters[0].Value = Original_FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new DateTime?();
                }
                else
                {
                    return new DateTime?(Conversions.ToDate(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual DateTime? SelectLastFillDate(int Original_FluidID)
            {
                var command = CommandCollection[4];
                command.Parameters[0].Value = Original_FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new DateTime?();
                }
                else
                {
                    return new DateTime?(Conversions.ToDate(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, false)]
            public virtual int UpdateInventory(double CurrentAmount, string ExpirationDate, string Last_Fill_Date, int Original_FluidID, int FluidID)
            {
                var command = CommandCollection[5];
                command.Parameters[0].Value = CurrentAmount;
                if (ExpirationDate is null)
                {
                    throw new ArgumentNullException("ExpirationDate");
                }
                else
                {
                    command.Parameters[1].Value = ExpirationDate;
                }
                if (Last_Fill_Date is null)
                {
                    throw new ArgumentNullException("Last_Fill_Date");
                }
                else
                {
                    command.Parameters[2].Value = Last_Fill_Date;
                }
                command.Parameters[3].Value = Original_FluidID;
                command.Parameters[4].Value = FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue = command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, false)]
            public virtual int UpdateInventoryFluidLvl(double CurrentAmount, int Original_FluidID, int FluidID)
            {
                var command = CommandCollection[6];
                command.Parameters[0].Value = CurrentAmount;
                command.Parameters[1].Value = Original_FluidID;
                command.Parameters[2].Value = FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue = command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class OrderFluidInfoTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrderFluidInfoTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection = value;
                        }
                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }
                    if (Adapter is not null && Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "OrderFluidInfo";
                tableMapping.ColumnMappings.Add("OrderID", "OrderID");
                tableMapping.ColumnMappings.Add("FluidID", "FluidID");
                tableMapping.ColumnMappings.Add("IsFluidMix", "IsFluidMix");
                tableMapping.ColumnMappings.Add("UsedOz", "UsedOz");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OrderFluidInfo] WHERE (([OrderID] = @Original_OrderID) AND ([F" + "luidID] = @Original_FluidID) AND ([IsFluidMix] = @Original_IsFluidMix) AND ([Use" + "dOz] = @Original_UsedOz))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsFluidMix", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "IsFluidMix", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UsedOz", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OrderFluidInfo] ([OrderID], [FluidID], [IsFluidMix], [UsedOz])" + " VALUES (@OrderID, @FluidID, @IsFluidMix, @UsedOz);" + '\r' + '\n' + "SELECT OrderID, FluidID, Is" + "FluidMix, UsedOz FROM OrderFluidInfo WHERE (FluidID = @FluidID) AND (OrderID = @" + "OrderID)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsFluidMix", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "IsFluidMix", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UsedOz", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OrderFluidInfo] SET [OrderID] = @OrderID, [FluidID] = @FluidID, [Is" + "FluidMix] = @IsFluidMix, [UsedOz] = @UsedOz WHERE (([OrderID] = @Original_OrderI" + "D) AND ([FluidID] = @Original_FluidID) AND ([IsFluidMix] = @Original_IsFluidMix)" + " AND ([UsedOz] = @Original_UsedOz));" + '\r' + '\n' + "SELECT OrderID, FluidID, IsFluidMix, UsedO" + "z FROM OrderFluidInfo WHERE (FluidID = @FluidID) AND (OrderID = @OrderID)";



                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsFluidMix", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "IsFluidMix", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UsedOz", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsFluidMix", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "IsFluidMix", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UsedOz", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FreeStyleDBConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[7];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT OrderID, FluidID, IsFluidMix, UsedOz FROM dbo.OrderFluidInfo";
                _commandCollection[0].CommandType = CommandType.Text;
                _commandCollection[1] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[1].Connection = Connection;
                _commandCollection[1].CommandText = "INSERT INTO [dbo].[OrderFluidInfo] ([OrderID], [FluidID], [IsFluidMix], [UsedOz])" + " VALUES (@OrderID, @FluidID, @IsFluidMix, @UsedOz);" + '\r' + '\n' + "SELECT OrderID, FluidID, Is" + "FluidMix, UsedOz FROM OrderFluidInfo WHERE (FluidID = @FluidID) AND (OrderID = @" + "OrderID)";


                _commandCollection[1].CommandType = CommandType.Text;
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsFluidMix", SqlDbType.VarChar, 50, ParameterDirection.Input, 0, 0, "IsFluidMix", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UsedOz", SqlDbType.Float, 8, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[2].Connection = Connection;
                _commandCollection[2].CommandText = "SELECT AVG(UsedOz + UsedOz) AS AverageOrderSize" + '\r' + '\n' + "FROM     OrderFluidInfo" + '\r' + '\n' + "WHERE  " + "(FluidID = @Original_FluidID)";
                _commandCollection[2].CommandType = CommandType.Text;
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[3].Connection = Connection;
                _commandCollection[3].CommandText = "SELECT COUNT(*) AS Count_ofFluidIDWDP" + '\r' + '\n' + "FROM     OrderFluidInfo" + '\r' + '\n' + "WHERE  (OrderID I" + "N" + '\r' + '\n' + "                      (SELECT OrderID" + '\r' + '\n' + "                       FROM      Order" + "s" + '\r' + '\n' + "                       WHERE   (DateOfOrder > @StartDate) AND (DateOfOrder < " + "@EndDate))) AND (FluidID = @FluidID)";


                _commandCollection[3].CommandType = CommandType.Text;
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.VarChar, 3, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.VarChar, 3, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[4] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[4].Connection = Connection;
                _commandCollection[4].CommandText = "SELECT COUNT(*) AS count" + '\r' + '\n' + "FROM OrderFluidInfo" + '\r' + '\n' + "WHERE fluidID = @FluidID;";
                _commandCollection[4].CommandType = CommandType.Text;
                _commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FluidID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "FluidID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[5].Connection = Connection;
                _commandCollection[5].CommandText = "SELECT FluidID, COUNT(*) AS Count" + '\r' + '\n' + "FROM OrderFluidInfo" + '\r' + '\n' + "WHERE FluidID < 10" + '\r' + '\n' + "GROUP" + " BY FluidID" + '\r' + '\n' + "HAVING COUNT(*) = (" + '\r' + '\n' + "    SELECT MAX(count) FROM (" + '\r' + '\n' + "        SELECT C" + "OUNT(*) as count FROM OrderFluidInfo GROUP BY FluidID" + '\r' + '\n' + "    ) AS t" + '\r' + '\n' + ")";

                _commandCollection[5].CommandType = CommandType.Text;
                _commandCollection[6] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[6].Connection = Connection;
                _commandCollection[6].CommandText = "SELECT COUNT(*) AS Count_ofServingSizesWDP" + '\r' + '\n' + "FROM     OrderFluidInfo" + '\r' + '\n' + "WHERE  (Flui" + "dID = 10) AND (UsedOz = @UsedOz) AND (OrderID IN" + '\r' + '\n' + "                      (SELECT " + "OrderID" + '\r' + '\n' + "                       FROM      Orders" + '\r' + '\n' + "                       WHERE  " + " (DateOfOrder > @StartDate) AND (DateOfOrder < @EndDate)))";


                _commandCollection[6].CommandType = CommandType.Text;
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UsedOz", SqlDbType.Float, 8, ParameterDirection.Input, 0, 0, "UsedOz", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.VarChar, 3, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.VarChar, 3, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FreeStyleDBDataSet.OrderFluidInfoDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FreeStyleDBDataSet.OrderFluidInfoDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FreeStyleDBDataSet.OrderFluidInfoDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet.OrderFluidInfoDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet dataSet)
            {
                return Adapter.Update(dataSet, "OrderFluidInfo");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_OrderID, int Original_FluidID, string Original_IsFluidMix, double Original_UsedOz)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_OrderID;
                Adapter.DeleteCommand.Parameters[1].Value = Original_FluidID;
                if (Original_IsFluidMix is null)
                {
                    throw new ArgumentNullException("Original_IsFluidMix");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_IsFluidMix;
                }
                Adapter.DeleteCommand.Parameters[3].Value = Original_UsedOz;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int OrderID, int FluidID, string IsFluidMix, double UsedOz)
            {
                Adapter.InsertCommand.Parameters[0].Value = OrderID;
                Adapter.InsertCommand.Parameters[1].Value = FluidID;
                if (IsFluidMix is null)
                {
                    throw new ArgumentNullException("IsFluidMix");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = IsFluidMix;
                }
                Adapter.InsertCommand.Parameters[3].Value = UsedOz;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int OrderID, int FluidID, string IsFluidMix, double UsedOz, int Original_OrderID, int Original_FluidID, string Original_IsFluidMix, double Original_UsedOz)
            {
                Adapter.UpdateCommand.Parameters[0].Value = OrderID;
                Adapter.UpdateCommand.Parameters[1].Value = FluidID;
                if (IsFluidMix is null)
                {
                    throw new ArgumentNullException("IsFluidMix");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = IsFluidMix;
                }
                Adapter.UpdateCommand.Parameters[3].Value = UsedOz;
                Adapter.UpdateCommand.Parameters[4].Value = Original_OrderID;
                Adapter.UpdateCommand.Parameters[5].Value = Original_FluidID;
                if (Original_IsFluidMix is null)
                {
                    throw new ArgumentNullException("Original_IsFluidMix");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = Original_IsFluidMix;
                }
                Adapter.UpdateCommand.Parameters[7].Value = Original_UsedOz;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string IsFluidMix, double UsedOz, int Original_OrderID, int Original_FluidID, string Original_IsFluidMix, double Original_UsedOz)
            {
                return Update(Original_OrderID, Original_FluidID, IsFluidMix, UsedOz, Original_OrderID, Original_FluidID, Original_IsFluidMix, Original_UsedOz);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, false)]
            public virtual int InsertOrderInfo(int OrderID, int FluidID, string IsFluidMix, double UsedOz)
            {
                var command = CommandCollection[1];
                command.Parameters[0].Value = OrderID;
                command.Parameters[1].Value = FluidID;
                if (IsFluidMix is null)
                {
                    throw new ArgumentNullException("IsFluidMix");
                }
                else
                {
                    command.Parameters[2].Value = IsFluidMix;
                }
                command.Parameters[3].Value = UsedOz;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue = command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual double? SelectAverageOrderSize(int Original_FluidID)
            {
                var command = CommandCollection[2];
                command.Parameters[0].Value = Original_FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new double?();
                }
                else
                {
                    return new double?(Conversions.ToDouble(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int? SelectCountofFluidIDWDP(int FluidID, string StartDate, string EndDate)
            {
                var command = CommandCollection[3];
                command.Parameters[0].Value = FluidID;
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    command.Parameters[1].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    command.Parameters[2].Value = EndDate;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new int?();
                }
                else
                {
                    return new int?(Conversions.ToInteger(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object SelectCountOfSpecifyOrder(int FluidID)
            {
                var command = CommandCollection[4];
                command.Parameters[0].Value = FluidID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int? SelectMaxFluidUsed()
            {
                var command = CommandCollection[5];
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new int?();
                }
                else
                {
                    return new int?(Conversions.ToInteger(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object SelectTimesofCo2WasUsedGivenStartDateandEndateOfOrder(double UsedOz, string StartDate, string EndDate)
            {
                var command = CommandCollection[6];
                command.Parameters[0].Value = UsedOz;
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    command.Parameters[1].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    command.Parameters[2].Value = EndDate;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class OrdersTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter = value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public OrdersTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection = value;
                        }
                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }
                    if (Adapter is not null && Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }
                    if (Adapter is not null && Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Orders";
                tableMapping.ColumnMappings.Add("OrderID", "OrderID");
                tableMapping.ColumnMappings.Add("OrderAmount", "OrderAmount");
                tableMapping.ColumnMappings.Add("DateOfOrder", "DateOfOrder");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Orders] WHERE (([OrderID] = @Original_OrderID) AND ([OrderAmou" + "nt] = @Original_OrderAmount) AND ([DateOfOrder] = @Original_DateOfOrder))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "OrderAmount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfOrder", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Orders] ([OrderAmount], [DateOfOrder]) VALUES (@OrderAmount, @" + "DateOfOrder);" + '\r' + '\n' + "SELECT OrderID, OrderAmount, DateOfOrder FROM Orders WHERE (Order" + "ID = SCOPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "OrderAmount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfOrder", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Orders] SET [OrderAmount] = @OrderAmount, [DateOfOrder] = @DateOfOr" + "der WHERE (([OrderID] = @Original_OrderID) AND ([OrderAmount] = @Original_OrderA" + "mount) AND ([DateOfOrder] = @Original_DateOfOrder));" + '\r' + '\n' + "SELECT OrderID, OrderAmoun" + "t, DateOfOrder FROM Orders WHERE (OrderID = @OrderID)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "OrderAmount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfOrder", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderID", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_OrderAmount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "OrderAmount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateOfOrder", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "OrderID", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FreeStyleDBConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[8];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT OrderID, OrderAmount, DateOfOrder FROM dbo.Orders";
                _commandCollection[0].CommandType = CommandType.Text;
                _commandCollection[1] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[1].Connection = Connection;
                _commandCollection[1].CommandText = "SELECT OrderID, OrderAmount, DateOfOrder" + '\r' + '\n' + "FROM     Orders" + '\r' + '\n' + "WHERE  (DateOfOrder > " + "@StartDate) AND (DateOfOrder < @EndDate)";
                _commandCollection[1].CommandType = CommandType.Text;
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[2].Connection = Connection;
                _commandCollection[2].CommandText = "SELECT MAX(OrderID) FROM Orders";
                _commandCollection[2].CommandType = CommandType.Text;
                _commandCollection[3] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[3].Connection = Connection;
                _commandCollection[3].CommandText = "INSERT INTO [dbo].[Orders] ([OrderAmount], [DateOfOrder]) VALUES (@OrderAmount, @" + "DateOfOrder);" + '\r' + '\n' + "SELECT OrderID, OrderAmount, DateOfOrder FROM Orders WHERE (Order" + "ID = SCOPE_IDENTITY())";

                _commandCollection[3].CommandType = CommandType.Text;
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrderAmount", SqlDbType.Float, 8, ParameterDirection.Input, 0, 0, "OrderAmount", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOfOrder", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[4] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[4].Connection = Connection;
                _commandCollection[4].CommandText = "SELECT COUNT(OrderID) AS OrderID_Count" + '\r' + '\n' + "FROM     Orders";
                _commandCollection[4].CommandType = CommandType.Text;
                _commandCollection[5] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[5].Connection = Connection;
                _commandCollection[5].CommandText = "SELECT COUNT(*) AS Count_OfOrders" + '\r' + '\n' + "FROM     Orders" + '\r' + '\n' + "WHERE  (DateOfOrder > @StartD" + "ate) AND (DateOfOrder < @EndDate)";
                _commandCollection[5].CommandType = CommandType.Text;
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[6] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[6].Connection = Connection;
                _commandCollection[6].CommandText = "SELECT SUM(OrderAmount) AS TotalAmount" + '\r' + '\n' + "FROM     Orders" + '\r' + '\n' + "WHERE  (DateOfOrder > @S" + "tartDate) AND (DateOfOrder < @EndDate)";
                _commandCollection[6].CommandType = CommandType.Text;
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndDate", SqlDbType.Date, 3, ParameterDirection.Input, 0, 0, "DateOfOrder", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[7] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[7].Connection = Connection;
                _commandCollection[7].CommandText = "SELECT SUM(OrderAmount) AS OrderAmount_quantity" + '\r' + '\n' + "FROM     Orders";
                _commandCollection[7].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FreeStyleDBDataSet.OrdersDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FreeStyleDBDataSet.OrdersDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FreeStyleDBDataSet.OrdersDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, false)]
            public virtual int FillByOrders(FreeStyleDBDataSet.OrdersDataTable dataTable, string StartDate, string EndDate)
            {
                Adapter.SelectCommand = CommandCollection[1];
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    Adapter.SelectCommand.Parameters[0].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = EndDate;
                }
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, false)]
            public virtual FreeStyleDBDataSet.OrdersDataTable OrdersTableWithDateParameters(string StartDate, string EndDate)
            {
                Adapter.SelectCommand = CommandCollection[1];
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    Adapter.SelectCommand.Parameters[0].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value = EndDate;
                }
                var dataTable = new FreeStyleDBDataSet.OrdersDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet.OrdersDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FreeStyleDBDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Orders");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_OrderID, double Original_OrderAmount, DateTime Original_DateOfOrder)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_OrderID;
                Adapter.DeleteCommand.Parameters[1].Value = Original_OrderAmount;
                Adapter.DeleteCommand.Parameters[2].Value = Original_DateOfOrder;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(double OrderAmount, DateTime DateOfOrder)
            {
                Adapter.InsertCommand.Parameters[0].Value = OrderAmount;
                Adapter.InsertCommand.Parameters[1].Value = DateOfOrder;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(double OrderAmount, DateTime DateOfOrder, int Original_OrderID, double Original_OrderAmount, DateTime Original_DateOfOrder, int OrderID)
            {
                Adapter.UpdateCommand.Parameters[0].Value = OrderAmount;
                Adapter.UpdateCommand.Parameters[1].Value = DateOfOrder;
                Adapter.UpdateCommand.Parameters[2].Value = Original_OrderID;
                Adapter.UpdateCommand.Parameters[3].Value = Original_OrderAmount;
                Adapter.UpdateCommand.Parameters[4].Value = Original_DateOfOrder;
                Adapter.UpdateCommand.Parameters[5].Value = OrderID;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(double OrderAmount, DateTime DateOfOrder, int Original_OrderID, double Original_OrderAmount, DateTime Original_DateOfOrder)
            {
                return Update(OrderAmount, DateOfOrder, Original_OrderID, Original_OrderAmount, Original_DateOfOrder, Original_OrderID);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object GetMaxOrderID()
            {
                var command = CommandCollection[2];
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, false)]
            public virtual int InsertOrder(double OrderAmount, string DateOfOrder)
            {
                var command = CommandCollection[3];
                command.Parameters[0].Value = OrderAmount;
                if (DateOfOrder is null)
                {
                    throw new ArgumentNullException("DateOfOrder");
                }
                else
                {
                    command.Parameters[1].Value = DateOfOrder;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue = command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int? SelectCountNumberOfOrders()
            {
                var command = CommandCollection[4];
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new int?();
                }
                else
                {
                    return new int?(Conversions.ToInteger(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int? SelectCountOfOrderWDP(string StartDate, string EndDate)
            {
                var command = CommandCollection[5];
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    command.Parameters[0].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    command.Parameters[1].Value = EndDate;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new int?();
                }
                else
                {
                    return new int?(Conversions.ToInteger(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual double? SelectTotalOrderAmountGivenStartAndEndDate(string StartDate, string EndDate)
            {
                var command = CommandCollection[6];
                if (StartDate is null)
                {
                    throw new ArgumentNullException("StartDate");
                }
                else
                {
                    command.Parameters[0].Value = StartDate;
                }
                if (EndDate is null)
                {
                    throw new ArgumentNullException("EndDate");
                }
                else
                {
                    command.Parameters[1].Value = EndDate;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new double?();
                }
                else
                {
                    return new double?(Conversions.ToDouble(returnValue));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual double? SelectTotalRevenueCollected()
            {
                var command = CommandCollection[7];
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue = command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null || ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return new double?();
                }
                else
                {
                    return new double?(Conversions.ToDouble(returnValue));
                }
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private InventoryTableAdapter _inventoryTableAdapter;

            private OrderFluidInfoTableAdapter _orderFluidInfoTableAdapter;

            private OrdersTableAdapter _ordersTableAdapter;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public InventoryTableAdapter InventoryTableAdapter
            {
                get
                {
                    return _inventoryTableAdapter;
                }
                set
                {
                    _inventoryTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public OrderFluidInfoTableAdapter OrderFluidInfoTableAdapter
            {
                get
                {
                    return _orderFluidInfoTableAdapter;
                }
                set
                {
                    _orderFluidInfoTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public OrdersTableAdapter OrdersTableAdapter
            {
                get
                {
                    return _ordersTableAdapter;
                }
                set
                {
                    _ordersTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    if (_inventoryTableAdapter is not null && _inventoryTableAdapter.Connection is not null)
                    {
                        return _inventoryTableAdapter.Connection;
                    }
                    if (_orderFluidInfoTableAdapter is not null && _orderFluidInfoTableAdapter.Connection is not null)
                    {
                        return _orderFluidInfoTableAdapter.Connection;
                    }
                    if (_ordersTableAdapter is not null && _ordersTableAdapter.Connection is not null)
                    {
                        return _ordersTableAdapter.Connection;
                    }
                    return null;
                }
                set
                {
                    _connection = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_inventoryTableAdapter is not null)
                    {
                        count = count + 1;
                    }
                    if (_orderFluidInfoTableAdapter is not null)
                    {
                        count = count + 1;
                    }
                    if (_ordersTableAdapter is not null)
                    {
                        count = count + 1;
                    }
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(FreeStyleDBDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_inventoryTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.Inventory.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null && 0 < updatedRows.Length)
                    {
                        result = result + _inventoryTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                if (_ordersTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.Orders.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null && 0 < updatedRows.Length)
                    {
                        result = result + _ordersTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                if (_orderFluidInfoTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.OrderFluidInfo.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null && 0 < updatedRows.Length)
                    {
                        result = result + _orderFluidInfoTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(FreeStyleDBDataSet dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_inventoryTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.Inventory.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null && 0 < addedRows.Length)
                    {
                        result = result + _inventoryTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                if (_ordersTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.Orders.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null && 0 < addedRows.Length)
                    {
                        result = result + _ordersTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                if (_orderFluidInfoTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.OrderFluidInfo.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null && 0 < addedRows.Length)
                    {
                        result = result + _orderFluidInfoTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(FreeStyleDBDataSet dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_orderFluidInfoTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.OrderFluidInfo.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null && 0 < deletedRows.Length)
                    {
                        result = result + _orderFluidInfoTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                if (_ordersTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.Orders.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null && 0 < deletedRows.Length)
                    {
                        result = result + _ordersTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                if (_inventoryTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.Inventory.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null && 0 < deletedRows.Length)
                    {
                        result = result + _inventoryTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null || updatedRows.Length < 1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null || allAddedRows.Count < 1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i < updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row) == false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i = i + 1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(FreeStyleDBDataSet dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges() == false)
                {
                    return 0;
                }
                if (_inventoryTableAdapter is not null && MatchTableAdapterConnection(_inventoryTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }
                if (_orderFluidInfoTableAdapter is not null && MatchTableAdapterConnection(_orderFluidInfoTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }
                if (_ordersTableAdapter is not null && MatchTableAdapterConnection(_ordersTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" + "ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State & ConnectionState.Broken) == ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State == ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened = true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" + "ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet = new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_inventoryTableAdapter is not null)
                    {
                        revertConnections.Add(_inventoryTableAdapter, _inventoryTableAdapter.Connection);
                        _inventoryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _inventoryTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_inventoryTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _inventoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_inventoryTableAdapter.Adapter);
                        }
                    }
                    if (_orderFluidInfoTableAdapter is not null)
                    {
                        revertConnections.Add(_orderFluidInfoTableAdapter, _orderFluidInfoTableAdapter.Connection);
                        _orderFluidInfoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _orderFluidInfoTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_orderFluidInfoTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _orderFluidInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_orderFluidInfoTableAdapter.Adapter);
                        }
                    }
                    if (_ordersTableAdapter is not null)
                    {
                        revertConnections.Add(_ordersTableAdapter, _ordersTableAdapter.Connection);
                        _ordersTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _ordersTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_ordersTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _ordersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_ordersTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
                    {
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result = result + UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                    if (0 < allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i = i + 1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (_inventoryTableAdapter is not null)
                    {
                        _inventoryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_inventoryTableAdapter];
                        _inventoryTableAdapter.Transaction = null;
                    }
                    if (_orderFluidInfoTableAdapter is not null)
                    {
                        _orderFluidInfoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_orderFluidInfoTableAdapter];
                        _orderFluidInfoTableAdapter.Transaction = null;
                    }
                    if (_ordersTableAdapter is not null)
                    {
                        _ordersTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_ordersTableAdapter];
                        _ordersTableAdapter.Transaction = null;
                    }
                    if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i < adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate = true;
                            i = i + 1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null || inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation = relation;
                    if (childFirst)
                    {
                        _childFirst = -1;
                    }
                    else
                    {
                        _childFirst = 1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance = 0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row] = row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null && traversedRows.ContainsKey(parent) == false)
                    {
                        distance = distance + 1;
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance == 0)
                    {
                        traversedRows.Clear();
                        traversedRows[row] = row;
                        parent = row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null && traversedRows.ContainsKey(parent) == false)
                        {
                            distance = distance + 1;
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst * distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null && root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}